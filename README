	Pentru programul server.c am inceput ca la laborator prin a completa campurile
pentru socket-uri de udp si tcp pe care le-am adaugat in file descriptor pentru a 
incepe multiplexarea.
	Implementarea clientilor si mesajelor acestora am facut-o prin liste, carora le-am 
realizat functii de adaugare, stergere si cautare in acestea.
	Multiplexarea incepe prin a verifica daca se primeste un mesaj de la stdin din 
server care sa fie echivalent cu "exit", astfel inchid toate conexiunile dintre server
si clienti prin a le trimite o comanda "kick" pe care clientii o inteleg ca fiind
echivalenta cu o comanda exit. In cele din urma inchid socketii de tcp si udp si inchid 
programul.
	In continuare verific daca se primeste un mesaj de la clientii udp. Pentru un 
mesaj de la acestia incep prin a desface bufferul in 3 parti, topic, type si content
si apoi bazat pe type incep un case care completeaza o structura de tip tcp_msg. Dupa
iesirea din case apelez functia de send_or_store care trimite structura nou formata la
clientii conectati si o stocheza pentru clientii deconectati dar care au SF setat pe 1
pentru topic-ul respectiv.
	Urmatoarea verificare este aceea daca am primit un mesaj de la un client tcp,
singurele mesaje date de acestea pot fi: conectare, deconectare, subscribe, unsubscribe.
Am inceput prin a verifica daca un client se conecteaza, pentru a verifica daca un
client nou a fost adaugat am folosit functia connect_client care compara id-ul noului 
client cu id-ul celorlati deja conectati sau fosti conectati. Daca un client este
nou adaugat setez o variabila globala (added_client) pe 1 pentru a stiide output sa dau. Tot in aceasta verificare am adaugat functia search_in_pending care cauta mesajele 
netrimise catre acest client nou conectat, iar daca gaseste astfel de mesaje le trimite.
Pentru a rezolva problema in care trimit mesaje mai mari decat structura folosita, am
setat buffer-ul la marimea structurii tcp_msg, astfel o sa trimit mesaje de marimea 
maxima a structurii.
	In cazul in care se deconecteaza un client, folosesc o functie care itereaza prin
lista de clienti (disconnect_clients) care atunci cand gaseste clientul ii seteaza
paramentru de conectivitate pe 0. In cele din urma inchid socket-ul acestuia si il scot
din file descriptors.
	Urmatoarea verificare este pentru comanda subscribe care imi cauta clientul
curent cu ajutorul functiei (search_client_by_fd) si ii adaug acestuia topicul in 
lista de subscriptions a lui.
	Pentru comanda de unsubscribe, caut client-ul cu functia search_client_by_fd
si ii scot acestuia topic-ul din lista de subscriptions a lui.
	In programul subscriber.c am inceput prin a completa socket-ul pentru conexiune
la server si de a incerca sa fac bind cu acest client. Dupa ce am facut conectarea 
trimit id-ul pe care vreau sa il am la client si apoi dezactivez algoritmul lui Nagle. 
Multiplexarea incepe prin a verifica daca mesajul primis este unul de la tastatura si
dac acesta este egal cu "exit". In acest caz ies din program.
	In continuare verific daca urmatoarea comanda data la tastatura este subscribe
unsubscribe. In primul caz incep completarea unei structuri command_subscribe care poate
sa fie gasita si in server.c, poi o trimit catre server. Acelasi lucru este facut si 
pentru unsubscribe, doar ca folosesc o structura command_unsubscribe.
	Urmatoarea verificare este facuta pentru mesajele primite de la server. Aici
verific daca a fost trimis un mesaj de tip "kick" ce inseamna ca trebuie sa inchei 
programul acestui client, iar daca nu este un astfel de mesaj inseamna ca am primit
un mesaj de tip tcp_msg pe care il pun din buffer intr-o structura de tip tcp_msg si o
printez.

Defta Mihai-Sebastian 322CD
